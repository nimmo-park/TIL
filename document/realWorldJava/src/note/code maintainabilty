2.코드 유지보수성과 안티패턴

* 코드의 유지보수성 생
- 특정기능을 담당하는 코드를 쉽게찾을 수 있어야한다.
- 코드가 어떤일을 수행하는지 쉽게 이해가 가능해야한다.
- 새로운 기능을 쉽게 추가하거나 기존 기능을 쉽게 제거 할 수 있어야한다.
- 캡슐화가 잘되어 있어야한다. 즉 코드가 사용자에게는 세부 구현 내용이 감춰져 있으므로 사용자가 쉽게 코드를이해하고, 기능을 바꿀수 있어야한다.

* 안티패턴
- 한 거대한 God 클래스 때문에 코드를 이해하기가 어렵다.
- 코드중복 때문에 코드가 불안정하고 변화에 쉽게 망가진다.

* God 클래스란 -> 한개의 파일에 모든 코드가 구현되는 경우 

* 안티패턴 해결방안 -> 단일책임원칙을 생각한다.(SRP)
* 중복배제의 원칙(DRY) Don't repeat yourself 반복을 제거

* 단일책임원칙 쉽게 관리하고 유지보수하는 코드를 구현하는데 도움을 주는 포괄적인 개발 소프트웨어 지침
- 한 클래스는 한 기능만 책임진다.
- 클래스가 바뀌어야하는 이유는 오직 하나여야만 한다.
- SRP는 보통 클래스와 메서드에 적용한다.
- SRP는 한 가지 특정 동작, 개념, 카테고리와 관련된다.
- SRP를 적용하면 코드가 바뀌어야하는 이유가 한 가지로 제한되므로 더 튼튼한 코드를 만들 수 있다.

단일 책임을 적용하기 위해서 지금 자바 프로그램에서 해야 할일
1.입력 읽기
2.주어진 형식의 입력파싱
3.결과처리
4.결과요약 리포트

